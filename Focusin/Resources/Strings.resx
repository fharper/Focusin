<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>about</value>
  </data>
  <data name="asdf" xml:space="preserve">
    <value>asdf</value>
  </data>
  <data name="BackgroundColor" xml:space="preserve">
    <value>Background color</value>
  </data>
  <data name="Break" xml:space="preserve">
    <value>Break</value>
  </data>
  <data name="BreakDuration" xml:space="preserve">
    <value>Break duration</value>
  </data>
  <data name="CurrentSession" xml:space="preserve">
    <value>Current session:</value>
  </data>
  <data name="DefaultSettings" xml:space="preserve">
    <value>default settings</value>
  </data>
  <data name="DisableScreenTimeOut" xml:space="preserve">
    <value>Disable screen time-out</value>
  </data>
  <data name="EnableSound" xml:space="preserve">
    <value>Enable sound</value>
  </data>
  <data name="EnableVibration" xml:space="preserve">
    <value>Enable vibration</value>
  </data>
  <data name="ForegroundColor" xml:space="preserve">
    <value>Foreground color</value>
  </data>
  <data name="Instructions" xml:space="preserve">
    <value>instructions</value>
  </data>
  <data name="InstructionsHeader" xml:space="preserve">
    <value>Focusin is an application based on the pomodoro technique. What is the pomodoro technique? The pomodoro technique is a time management method. The technique uses a timer to break down periods of work into 25-minute intervals separated by breaks.</value>
  </data>
  <data name="InstructionsList1" xml:space="preserve">
    <value>1. Decide on the task to be done</value>
  </data>
  <data name="InstructionsList2" xml:space="preserve">
    <value>2. Set the pomodoro timer to 25 minutes</value>
  </data>
  <data name="InstructionsList3" xml:space="preserve">
    <value>3. Work on the task until the timer rings</value>
  </data>
  <data name="InstructionsList4" xml:space="preserve">
    <value>4. Take a short break (5 minutes)</value>
  </data>
  <data name="InstructionsList5" xml:space="preserve">
    <value>5. After four sessions, take a long break (15-20 mins).</value>
  </data>
  <data name="InstructionsListHeader" xml:space="preserve">
    <value>There are five basic steps to implementing the technique:</value>
  </data>
  <data name="LongBreakDuration" xml:space="preserve">
    <value>Long break duration</value>
  </data>
  <data name="LongBreakFrequency" xml:space="preserve">
    <value>Long break frequency</value>
  </data>
  <data name="Play" xml:space="preserve">
    <value>play</value>
  </data>
  <data name="SessionDuration" xml:space="preserve">
    <value>Session duration</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>settings</value>
    <comment>The settings button on the app bar</comment>
  </data>
  <data name="SettingsHeader" xml:space="preserve">
    <value>SETTINGS</value>
    <comment>The settings' page header</comment>
  </data>
  <data name="SettingsReset" xml:space="preserve">
    <value>Settings reset</value>
  </data>
  <data name="SettingsResetMessage" xml:space="preserve">
    <value>Do you want to reset your settings to default?</value>
  </data>
  <data name="Stop" xml:space="preserve">
    <value>stop</value>
  </data>
  <data name="Support" xml:space="preserve">
    <value>Support: fharper@oocz.net</value>
  </data>
  <data name="TimerSoundCopy" xml:space="preserve">
    <value>Timer Sound from freesound.org @ Herbert Boland</value>
  </data>
  <data name="Version" xml:space="preserve">
    <value>version</value>
  </data>
  <data name="ViewMore" xml:space="preserve">
    <value>view more from Frédéric Harper</value>
  </data>
  <data name="Work" xml:space="preserve">
    <value>Work</value>
  </data>
  <data name="BasedSource" xml:space="preserve">
    <value>Based on Jesus Rodriguez initial source code</value>
  </data>
</root>